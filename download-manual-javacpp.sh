#!/bin/bash

echo "üì• Descargando librer√≠as JavaCPP manualmente..."

# Configurar variables de entorno
export JAVA_HOME=/usr/local/openjdk-21
export PATH="$JAVA_HOME/bin:$PATH"
export JAVACPP_CACHE_DIR=/tmp/javacpp-cache
export JAVACPP_PLATFORM=linux-x86_64

# Crear directorio de cache
mkdir -p /tmp/javacpp-cache

cd /app/audiveris-5.4

set -e

echo "üîß Descargando librer√≠as JavaCPP espec√≠ficas..."

# Candidatos de URLs para Leptonica y Tesseract (probar en cascada)
LEPTONICA_CANDIDATES=(
  "https://repo1.maven.org/maven2/org/bytedeco/leptonica-platform/1.83.1-1.5.9/leptonica-platform-1.83.1-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/leptonica-platform/1.83.0-1.5.9/leptonica-platform-1.83.0-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/leptonica-platform/1.82.0-1.5.9/leptonica-platform-1.82.0-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/leptonica/1.83.0-1.5.9/leptonica-1.83.0-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/leptonica/1.82.0-1.5.9/leptonica-1.82.0-1.5.9-linux-x86_64.jar"
)

TESSERACT_CANDIDATES=(
  "https://repo1.maven.org/maven2/org/bytedeco/tesseract-platform/5.3.1-1.5.9/tesseract-platform-5.3.1-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/tesseract-platform/5.3.0-1.5.9/tesseract-platform-5.3.0-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/tesseract/5.3.1-1.5.9/tesseract-5.3.1-1.5.9-linux-x86_64.jar"
  "https://repo1.maven.org/maven2/org/bytedeco/tesseract/5.3.0-1.5.9/tesseract-5.3.0-1.5.9-linux-x86_64.jar"
)

# Crear directorio temporal
TEMP_DIR="/tmp/javacpp-temp"
mkdir -p "$TEMP_DIR"

echo "üì• Descargando Leptonica JAR (con fallback de versiones)..."
LEPTONICA_OK=0
for URL in "${LEPTONICA_CANDIDATES[@]}"; do
  echo "‚û°Ô∏è Intentando: $URL"
  if curl -fsSL --retry 5 --retry-delay 2 "$URL" -o "$TEMP_DIR/leptonica.jar"; then
    if [ -s "$TEMP_DIR/leptonica.jar" ]; then LEPTONICA_OK=1; echo "‚úÖ Descargado Leptonica"; break; fi
  fi
  echo "‚ö†Ô∏è Fall√≥ curl, probando wget..."
  if wget -q "$URL" -O "$TEMP_DIR/leptonica.jar" && [ -s "$TEMP_DIR/leptonica.jar" ]; then LEPTONICA_OK=1; echo "‚úÖ Descargado Leptonica (wget)"; break; fi
done
if [ "$LEPTONICA_OK" -ne 1 ]; then echo "‚ùå No se pudo descargar ning√∫n JAR de Leptonica"; exit 1; fi

echo "üì• Descargando Tesseract JAR (con fallback de versiones)..."
TESSERACT_OK=0
for URL in "${TESSERACT_CANDIDATES[@]}"; do
  echo "‚û°Ô∏è Intentando: $URL"
  if curl -fsSL --retry 5 --retry-delay 2 "$URL" -o "$TEMP_DIR/tesseract.jar"; then
    if [ -s "$TEMP_DIR/tesseract.jar" ]; then TESSERACT_OK=1; echo "‚úÖ Descargado Tesseract"; break; fi
  fi
  echo "‚ö†Ô∏è Fall√≥ curl, probando wget..."
  if wget -q "$URL" -O "$TEMP_DIR/tesseract.jar" && [ -s "$TEMP_DIR/tesseract.jar" ]; then TESSERACT_OK=1; echo "‚úÖ Descargado Tesseract (wget)"; break; fi
done
if [ "$TESSERACT_OK" -ne 1 ]; then echo "‚ùå No se pudo descargar ning√∫n JAR de Tesseract"; exit 1; fi

echo "üì¶ Extrayendo librer√≠as nativas..."

cd "$TEMP_DIR"

# Extraer directamente al directorio de cache para que JavaCPP las encuentre
echo "üîç Extrayendo de leptonica.jar..."
unzip -o -q "$TEMP_DIR/leptonica.jar" -d "$JAVACPP_CACHE_DIR"

echo "üîç Extrayendo de tesseract.jar..."
unzip -o -q "$TEMP_DIR/tesseract.jar" -d "$JAVACPP_CACHE_DIR"

# Limpiar directorio temporal
rm -rf "$TEMP_DIR"

# Mostrar principales librer√≠as extra√≠das
echo "üìÅ Librer√≠as extra√≠das (resumen):"
find "$JAVACPP_CACHE_DIR" -type f \( -name "libjnileptonica*.so*" -o -name "libjnitesseract*.so*" \) | head -20

echo "üîç Verificando librer√≠as descargadas..."
ls -la /tmp/javacpp-cache/

echo "‚úÖ Descarga manual completada"
